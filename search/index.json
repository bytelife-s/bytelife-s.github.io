[{"content":"Problem In our recent work, we encountered a problem where we changed the secret in the vault and updated the way to retrieve it. This change didn\u0026rsquo;t cause any issues during local testing, but problems arose after deploying to staging. We hope to check what is being used in remote environments so that we can determine whether there\u0026rsquo;s an issue with our retrieval method or if there\u0026rsquo;s a problem with the secret itself.\nThis kind of issue is common in automated deployment environments because stg/prd usually involves a series of automatic injections and startup scripts. Therefore, this method helps us check conflicts between local and remote automated deployments.\nDebug 1. Env Setup First, we create a demo service with a single endpoint and an injected value.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package com.example.demo; import org.springframework.beans.factory.annotation.Value; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; @RestController public class DemoService { @Value(\u0026#34;${demo.value}\u0026#34;) private String stringValue; @GetMapping(\u0026#34;/demo\u0026#34;) public String getStringValue() { return stringValue; } } Next, we input the value into the application.yaml config. This value can be overridden by an injected environment variable.\n1 2 demo: value: ${DEMO_VALUE:123} Finally, we can construct the Docker image and run it to mimic the service deployment in a remote environment.\n1 2 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES c64090609d8a demo \u0026#34;java -jar app.jar\u0026#34; 8 seconds ago Up 7 seconds 0.0.0.0:8080-\u0026gt;8080/tcp charming_chatterjee 2. Install Arthas Arthas allows developers to troubleshoot production issues for Java applications without modifying code or restarting servers.\n1 2 3 4 5 6 7 # log into container docker exec -ti c64090609d8a bash # install and start arthas bash-4.4# curl -O https://arthas.aliyun.com/arthas-boot.jar bash-4.4# java -jar arthas-boot.jar 3. Check the target service We need to locate the target service bean within the Spring Context. A simple method is to monitor the Spring bean, so we do not need to manually create a custom bean with ApplicationContextAware.\n1 tt -t org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter invokeHandlerMethod Arthas assists in marking the target, allowing us to retrieve the application context and examine the bean as needed. The index from the previous step is 1000.\n1 tt -i 1000 -w \u0026#39;target.getApplicationContext().getBean(\u0026#34;demoService\u0026#34;)\u0026#39; We\u0026rsquo;ve noted that the injected value is 123, showing we can retrieve this value from the remote runtime.\nIn our case, the service\u0026rsquo;s injected value didn\u0026rsquo;t meet our expectations. So we traced the problem to a conflict in retrieving this value from the automated deployment pipeline and have since resolved it.\n4. More Usecase The above workflow has more applications. For instance, we can invoke the method in the bean to verify if the outcome is as expected.\n1 2 3 [arthas@1]$ tt -i 1000 -w \u0026#39;target.getApplicationContext().getBean(\u0026#34;demoService\u0026#34;).getStringValue()\u0026#39; @String[123] #ffect(row-cnt:1) cost in 1 ms. Or we can use ognl to check more info for static methods or property. For example, we can create a custom bean and implement ApplicationContextAware interface, set the context as static property, then we can use ognl to get context directly.\n1 2 3 sc -d com.xxx.SpringContexDemo ognl -c \u0026lt;index\u0026gt; \u0026#39;@com.xxx.SpringContexDemo@getApplicationContext()\u0026#39; Summary This debugging workflow allows us to access the ApplicationContext in a remote environment, aiding online issue resolution. It\u0026rsquo;s not just useful for verifying injected values; it can also help resolve more complex issues since we have access to the context and all its beans.\nReference https://github.com/alibaba/arthas\nhttps://github.com/alibaba/arthas/issues/482\n","date":"2024-03-09T00:00:00Z","permalink":"https://steveicode.github.io/p/check-injected-value-in-remotely-running-springboot-application/","title":"Check Bean and Config in Remotely Running SpringBoot Application"}]